<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Helm on 暢之之_Changzhi Jiang</title>
    <link>https://changzhijiang528.github.io/tags/helm/</link>
    <description>Recent content in Helm on 暢之之_Changzhi Jiang</description>
    <generator>Hugo</generator>
    <language>zh-Ch</language>
    <lastBuildDate>Mon, 16 Apr 2018 15:00:00 +0000</lastBuildDate>
    <atom:link href="https://changzhijiang528.github.io/tags/helm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Helm介绍</title>
      <link>https://changzhijiang528.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Mon, 16 Apr 2018 15:00:00 +0000</pubDate>
      <guid>https://changzhijiang528.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;kubernetes应用部署的挑战&#34;&gt;Kubernetes应用部署的挑战&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;让我们首先来看看Kubernetes，kubernetes提供了基于容器的应用集群管理，为容器化应用提供了部署运行、资源调度、服务发现和动态伸缩等一系列完整功能。&lt;/p&gt;&#xA;&lt;p&gt;kubernetes的核心设计理念是: 用户定义应用程序的规格，而kubernetes则负责按照定义的规则部署并运行应用程序，如果应用系统出现问题导致偏离了定义的规格，kubernetes负责对其进行自动修正。例如应用规格要求部署两个实例，其中一个实例异常终止了，kubernetes会检查到并重新启动一个新的实例。&lt;/p&gt;&#xA;&lt;p&gt;用户通过使用kubernetes API对象来描述应用程序规格，包括Pod，Service，Volume，Namespace，ReplicaSet，Deployment，Job等等。一般这些对象需要写入一系列的yaml文件中，然后通过kubernetes命令行工具kubectl进行部署。&lt;/p&gt;&#xA;&lt;p&gt;以下面的wordpress应用程序为例，涉及到多个kubernetes API对象，这些kubernetes API对象分散在多个yaml文件中。&lt;/p&gt;&#xA;&lt;p&gt;图1： Wordpress应用程序中涉及到的kubernetes API对象&#xA;&#xA;  &lt;img src=&#34;https://changzhijiang528.github.io/img/2018-04-16-using-helm-to-deploy-to-kubernetes/wordpress.png&#34; alt=&#34;&#34;&gt;&#xA;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;可以看到，在进行kubernetes软件部署时，我们面临下述问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如何管理，编辑和更新这些这些分散的kubernetes应用配置文件？&lt;/li&gt;&#xA;&lt;li&gt;如何把一套的相关配置文件作为一个应用进行管理？&lt;/li&gt;&#xA;&lt;li&gt;如何分发和重用kubernetes的应用配置？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Helm的引入很好地解决上面这些问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;helm是什么&#34;&gt;Helm是什么？&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;很多人都使用过Ubuntu下的ap-get或者CentOS下的yum, 这两者都是Linux系统下的包管理工具。采用apt-get/yum,应用开发者可以管理应用包之间的依赖关系，发布应用；用户则可以以简单的方式查找、安装、升级、卸载应用程序。&lt;/p&gt;&#xA;&lt;p&gt;我们可以将Helm看作Kubernetes下的apt-get/yum。Helm是Deis (&lt;a href=&#34;https://deis.com/&#34;&gt;https://deis.com/&lt;/a&gt;) 开发的一个用于kubernetes的包管理器。&lt;/p&gt;&#xA;&lt;p&gt;对于应用发布者而言，可以通过Helm打包应用，管理应用依赖关系，管理应用版本并发布应用到软件仓库。&lt;/p&gt;&#xA;&lt;p&gt;对于使用者而言，使用Helm后不用需要了解Kubernetes的Yaml语法并编写应用部署文件，可以通过Helm下载并在kubernetes上安装需要的应用。&lt;/p&gt;&#xA;&lt;p&gt;除此以外，Helm还提供了kubernetes上的软件部署，删除，升级，回滚应用的强大功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;helm组件及相关术语&#34;&gt;Helm组件及相关术语&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;开始接触Helm时遇到的一个常见问题就是Helm中的一些概念和术语非常让人迷惑，我开始学习Helm就遇到这个问题。&lt;/p&gt;&#xA;&lt;p&gt;因此我们先了解一下Helm的这些相关概念和术语。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Helm&lt;/p&gt;&#xA;&lt;p&gt;Kubernetes的应用打包工具，也是命令行工具的名称。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Tiller&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
